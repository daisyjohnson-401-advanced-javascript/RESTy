{"version":3,"sources":["images/loading.gif","components/header/header.js","components/form/form.js","components/history/history.js","components/results/results.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Form","props","urlHandler","event","url","target","value","newRequest","state","request","setState","methodHandler","method","bodyHandler","data","JSON","parse","submitHandler","a","preventDefault","handler","stringify","onSubmit","this","type","id","placeholder","onChange","defaultValue","onClick","name","React","Component","History","calls","Object","keys","map","key","apiCall","console","log","Results","loading","src","alt","headers","results","Footer","App","toggleLoading","updateResults","updateRequest","updateHistory","hash","md5","history","localStorage","setItem","fetchResults","axios","response","count","getItem","prompt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8a8b2cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.e4b6323e.gif\";","// Header component function\n\nimport React from 'react';\nimport './header.scss';  \n\nfunction Header() {\n  return (<header className=\"App-header\">\n    <h1>RESTy</h1>\n  </header>);\n}\n\nexport default Header;","// FOOTER COMPONENT\nimport React from 'react';\nimport './form.scss';\n\n// Make a function to make all REST methods functional\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    // Get a method with 'get as the default\n    const method = props.request.method || 'get';\n    //     // get a url with default of nothing\n    const url = props.request.url || '';\n    //     //get the data and turn it into a string or a default of nothing\n    const data = props.request.data ? JSON.stringify(props.request.data) : '';\n\n    this.state = {\n      request: {\n        method,\n        url,\n        data\n      }\n    };\n\n  }\n\n  //handle the URL change\n  urlHandler = (event) => {\n    let url = event.target.value;\n    // the ... is an ES6 spread operator that sets the nested data\n    const newRequest = { ...this.state.request, url };\n    this.setState({ request: newRequest });\n  };\n  // handle the Method change\n  methodHandler = (method) => {\n    const newRequest = { ...this.state.request, method };\n    this.setState({ request: newRequest });\n  };\n  // handle the body change\n  bodyHandler = (event) => {\n    let data = JSON.parse(event.target.value);\n    const newRequest = { ...this.state.request, data };\n    this.setState({ request: newRequest });\n  };\n  // handle the submit\n  submitHandler = async (event) => {\n    event.preventDefault();\n    this.props.handler(this.state.request);\n  };\n\n  render() {\n\n    return (\n      <form className=\"App-form\" onSubmit={this.submitHandler}>\n        <>\n          <input type=\"text\" id=\"urlText\" placeholder=\"http://api.url.here\" onChange={this.urlHandler} defaultValue={this.state.request.url} />\n          <button>Get it!</button>\n          </>\n          <ul>\n            <li> <button value=\"GET\" className={`method ${this.state.request.method === 'GET'}`} onClick={() => this.methodHandler('GET')}>GET</button></li>\n            <li> <button value=\"POST\" className={`method ${this.state.request.method === 'POST'}`} onClick={() => this.methodHandler('POST')}>POST</button></li>\n            <li> <button value=\"PUT\" className={`method ${this.state.request.method === 'PUT'}`} onClick={() => this.methodHandler('PUT')}>PUT</button></li>\n            <li> <button value=\"DELETE\" className={`method ${this.state.request.method === 'DELETE'}`} onClick={() => this.methodHandler('DELETE')}>DELETE</button></li>\n          </ul>\n          <textarea name=\"data\" onChange={this.bodyHandler} defaultValue={this.state.request.data} /> \n        </form>\n    );\n  }\n}\n// function Form(props) {\n//   // useState returns a pair: it's current state and a function to update it.\n//   const [request, setRequest] = useState({});\n\n//   // useEffect performs side effects from a function component\n//   useEffect(() => {\n//     // Get a method with 'get as the default\n//     const method = props.request.method || 'get';\n//     // get a url with default of nothing\n//     const url = props.request.url || '';\n//     //get the data and turn it into a string or a default of nothing\n//     const data = props.request.data ? JSON.stringify(props.request.data) : '';\n//     // call the useState request\n//     setRequest({ method, url, data });\n//   }, [props, setRequest]);\n\n\n\n\n\n\n\nexport default Form;","import React from 'react';\n\nfunction History(props) {\n  const calls = props.calls || {};\n\n  function loadRequest(apiCall){\n    console.log('API CALL here!', apiCall);\n    props.handler(apiCall);\n  }\n\n  return(\n    <aside className=\"App-history\">\n      <h4>Search History</h4>\n      <ul>\n        {\n          Object.keys(calls).map(key =>\n            <li key={key}>\n              <span className={`method ${props.calls[key].method}`}>\n                {props.calls[key].method}\n              </span>\n              <button className=\"url\" onClick={() => loadRequest(props.calls[key])}>\n                {props.calls[key].url}\n              </button>\n            </li>,\n          )\n        }\n      </ul>\n</aside>\n\n  )\n\n}\n\nexport default History;","import React from 'react';\nimport ReactJson from 'react-json-view'\nimport './results.scss'\nimport loading from '../../images/loading.gif';\n\n\n\n\nconst Results = (props) => {\n  return (\n    <section className=\"results\">\n\n      {/* Ternary saying if we are loading than show the gif otherwise show the results */}\n\n      {\n\n        props.loading ? (\n          <div className=\"loading\">\n            <img src={loading} alt=\"Loading\" />\n          </div>\n        ) : (\n          <>\n          <h2>Headers </h2>\n          <ReactJson src={props.headers} />\n          <h2>Results</h2>\n          <ReactJson src={props.results} />\n          </>\n          )\n      }\n    </section >\n\n)}\n\nexport default Results;","//Footer Component Function\n\nimport React from 'react';\nimport './footer.scss';\n\nfunction Footer() {\n  return (<footer className=\"App-footer\">\n    <p>&copy; 2020 Daisy Johnson</p>\n  </footer>)\n}\n\nexport default Footer;","import React from 'react';\nimport axios from 'axios';\nimport md5 from 'md5';\n\nimport Header from './components/header/header.js';\nimport Form from './components/form/form.js';\nimport History from './components/history/history.js'\nimport Results from './components/results/results.js';\nimport Footer from './components/footer/footer.js';\nimport './App.css';\n\nclass App extends React.Component{\n // By calling super(props) you are calling the constructor of React.Component. Super references parent class.\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      headers: null,\n      results: [],\n      loading: false,\n      request: {},\n      history:{},\n    };\n  }\n\n  // LOADING FUNCTION Toggles it to be the opposite of what it curently is\n  toggleLoading = () => {\n    this.setState({ loading: !this.state.loading});\n  }\n\n  // GET THE RESULTS\n  updateResults = (headers, results) => {\n    this.setState({ headers, results });\n  }\n\n  // Get the request\n  updateRequest = (request) => {\n    this.setState({ request });\n  }\n\nupdateHistory = (request) => {\n  let hash = md5(JSON.stringify(request));\n\n  // new history contains all of the old history\n  const history = {...this.state.history, [hash]:request }\n\n  this.setState({ history }, () => {\n    // grab the history from the state and stringify and it throw it in there with a key of history\n    localStorage.setItem('history', JSON.stringify(this.state.history));\n  });\n}\n\n  fetchResults = async (request) => {\n    try {\n      // Start Load\n      this.toggleLoading();\n\n      this.updateRequest(request);\n\n      let response = await axios(request);\n      //Stop load\n      this.toggleLoading();\n\n      this.updateHistory(request);\n\n      this.updateResults(response.headers, response.data);\n    }\n    catch(e){\n      console.log('ERROR', e);\n    }\n }\n    componentDidMount() {\n      let history = JSON.parse(localStorage.getItem('history'));\n      this.setState({ history });\n    }\n\n \n\n  // We are returning these results in our desired format, and rendering them to the app.\n  render(){\n    return(\n      <>\n      <Header />\n      <Form prompt=\"Enter API URL\" request={this.state.request} handler={this.fetchResults} />\n      <main>\n      <History handler={this.updateRequest} calls={this.state.history}/>\n      <Results loading={this.state.loading} count={this.state.count} results={this.state.results} headers={this.state.headers}/>\n      </main>\n      <Footer />\n      </>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}